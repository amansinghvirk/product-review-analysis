
"""
module: insights.py
author: Amandeep Singh
created on: 09-Jun-2024
last modified on: 09-Jun-2024

Module contains functions to 
    - call prompt functions
    - get the LLM response
    - pre and post processing of the LLM responses. 

"""

from src.utils import parse_json_output
import pandas as pd
from src.llm import gpt_completion
from src.prompts import (
    prompt_template_for_insights, prompt_template_for_suggestion, prompt_template_for_summary
)

def get_insights(
    topic: str, reviews: list, 
    sentiment: str, n_points: int, 
    llm_model: str
) -> list:
    """ Calls the LLM model to generate insights

    Args:
        topic (str): Topic for which insights need to be generated, used for prompt creation
        reviews (list): List of the reviews to be passed as context
        sentiment (str): Sentiment to be used for prompt creation, this guides the model about the 
            sentiment of the reviews.
        n_points (int): Number of insight points to be generated by Large Language Model
        llm_model (str): which open AI large language model to be used.

    Returns:
        list of the insights generated by LLM

    """

    prompt = prompt_template_for_insights(topic, reviews, sentiment, n_points)
    response = gpt_completion(prompt, llm_model)
    insights = parse_json_output(response)

    if insights is not None:
        return insights.get("key points")

    return None


def get_suggestions(
    topic: str, reviews: list, 
    n_points: int, llm_model: str
) -> list:
    """ Calls the LLM model to generate suggestions from the reviews

    Args:
        topic (str): Topic for which insights need to be generated, used for prompt creation
        reviews (list): List of the reviews to be passed as context
        n_points (int): Number of points to be generated by Large Language Model
        llm_model (str): which open AI large language model to be used.

    Returns:
        list of the suggestions generated by LLM

    """

    prompt = prompt_template_for_suggestion(topic, reviews, n_points)
    response = gpt_completion(prompt, llm_model)

    insights = parse_json_output(response)

    if insights is not None:
        return insights.get("suggestions")

    return None

def get_summary(topic: str, reviews: list, llm_model: str) -> str:
    """ Calls the LLM model to generate summary of the reviews

    Args:
        topic (str): Topic for which insights need to be generated, used for prompt creation
        reviews (list): List of the reviews to be passed as context
        llm_model (str): which open AI large language model to be used.

    Returns:
        Summary generated by the LLM

    """

    prompt = prompt_template_for_summary(topic, reviews)
    response = gpt_completion(prompt, llm_model)

    insights = parse_json_output(response)

    if insights is not None:
        return insights.get("summary")

    return None
    



